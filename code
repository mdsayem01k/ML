identifier
---------------------------
---------------------

#include<bits/stdc++.h>
using namespace std;

bool iskeyword(string str);               
bool isDelimeter(char c);                      
bool isvalididentifier(string str);     

int main()
{
    string input,token;
    token ="";                      
    cout << "Enter a string: ";
    getline(cin, input);               

    for(int i=0;i<input.length();i++)
    {
        if(isDelimeter(input[i]))       
        {
            if(iskeyword(token)==false)     
            {
                if(isvalididentifier(token) == true)    
                {
                    cout << token << " is a valid identifier\n";
                }
            }
            token = "";     
        }
        else
        {
            token = token + input[i];   

        }
    }
}

bool isvalididentifier(string str)
{
    bool res = false;                   
    if(isalpha(str[0]) || (str[0]=='_'))    
    {
        res = true;
        for(int i=1;i<str.length();i++)         
        {
            if(isalpha(str[i]) || isdigit(str[i]) || str[i]=='_')       
            {
                res = true;
            }
            else                
            {
                res = false;
                return res;
            }
        }
    }
    return res;
}

bool iskeyword(string str)
{
    string keywords[] = {"auto","break","case","char","const","continue","default","do","double","else",
                     "enum","extern","float","for","goto","if","int","long","register","return","short",
                     "signed","sizeof","static","struct","switch","typedef","union","unsigned","void",
                     "volatile","while"};

    for (int i = 0; i < 32; ++i)
        if (str == keywords[i])     
            return true;

    return false;
}

bool isDelimeter(char c)
{
    char delimeter[] ={' ', ',', ';', '(', ')', '\t', '+', '-', '*', '/', '%', '='};
    for(int i=0;i<12;i++)
    {
        if(c == delimeter[i])          
            return true;
    }
    return false;
}

--------------------------------------------------
Arithmetic operator
----------------------------------------
#include<bits/stdc++.h>
using namespace std;

int main(){
    set <string> op={"+","-","/","*"};
    string s;
    getline(cin,s);

    int i=0;
    int l=s.size();

    for(i=0;i<l;i++){
        string temp="";
        temp+=s[i];
        if(op.find(temp)!=op.end()){
            cout<<temp<<" ";
        }
    }
    return 0;

}
-------------------------------------------
keyword
----------------------------

#include<bits/stdc++.h>

using namespace std;

int main()
{
    set<string>keywords = {"for","while","int","float","string","char","return"};
    string s;
    getline(cin,s);
    int i = 0, l = s.size();
    while(i<l){
        string tmp="";
        while(s[i]!=' ' && i<l)tmp+=s[i++];
        if(keywords.find(tmp)!=keywords.end())
            cout<<tmp<<"\n";
        if(s[i]==' ')i++;
    }
    return 0;
}
------------------------
comment-
-----------------------
#include<bits/stdc++.h>
using namespace std;
void comment(string s);
int main(){
    string s;
    getline(cin,s);
    cout<<"comment: ";


    comment(s);
    return 0;
}

void comment(string s){
    int i=0;
    int l=s.size();
    for(i=0;i<l;i++){
        if(s[i]=='/'&& s[i+1]=='/'){
                string token="";
                i+=2;
                while(i<l){
                    token+=s[i];
                    i++;
                }
                cout<< token<<"\n";


        }
        else if(s[i]=='/'&& s[i+1]=='*'){
                string temp="";
                i+=2;
                while(i<l){
                    if(s[i]=='*'&& s[i+1]=='/'){
                        break;
                    }
                    temp+=s[i];
                    i++;
                }
                cout<<temp<<"\n";


        }


    }


}

--------------------------
delimiter
------------------------
#include<bits/stdc++.h>
using namespace std;

int main(){
    set<string> str={"\,","\;","\\","\/","{","\}","\|","\'"};
    string s;
    getline(cin,s);
    int l=s.size();
    int i=0;
    cout<< "delimiter: ";

    while(i<l){
        string token="";
        token+=s[i];
        if(str.find(token)!=str.end()){
            cout<<s[i]<<"\n";
        }
        i++;

    }

}
------------------------
number
--------------------------
#include<bits/stdc++.h>
using namespace std;

bool isdelimeter(char a)
{
    char delimeter[5] ={' ', ',', ';', '(', ')'};
    for(int i=0;i<5;i++)
    {
        if(a==delimeter[i])
            return true;
    }
}

int main()
{
    string inp,token;
    token = "";
    printf("give input statement:");
    getline(cin, inp);
    for(int i=0;i<inp.length();i++)
    {
        if(isdigit(inp[i]))
        {
            token = token + inp[i];
        }
        else if(isdelimeter(inp[i]))
        {
            if(token != "")
            {
                cout << token << " is a number \n";
            }
            token = "";
        }
    }
}
------------------------
relation operator-
-------------------------

#include<bits/stdc++.h>
using namespace std;

int main()
{
    string inp,token;
    token = "";
    printf("give input statement:");
    getline(cin, inp);
    for(int i=0;i<inp.length();i++)
    {
        if(inp[i] == '>')
        {
            if(inp[i+1] == '=')
            {
                cout << ">= is a relational operator\n";
            }
            else
            {
                cout << "> is a relational operator\n";
            }
        }
        else if(inp[i] == '<')
        {
            if(inp[i+1] == '=')
            {
                cout << "<= is a relational operator\n";
            }
            else
            {
                cout << "< is a relational operator\n";
            }
        }
        else if(inp[i]=='!' && inp[i+1]=='=')
        {
            cout << "!= is a relational operator\n";
        }
        else if(inp[i]=='=' && inp[i+1]=='=')
        {
            cout << "== is a relational operator\n";
        }
    }
}
-------------------------------------

simulation of DFA
---------------------------

/* The DFA is:
{W|W is a string of a and b ending withe the substring "bb".}
states,Q= {1,2,3}
start State,S=1;
Final state,F=3;
Input Symbols={a,b};
Transitions Are:
T( 1,a)=1;  T(1,b)=2;   T(2,a)=1;  T(2,b)=3;   T(3,a)=1;  T(3,b)=3;

                */
#include<bits/stdc++.h>
using namespace std;
int dfa(int s,char c){
    if(s==1){
        if(c=='a'){
            return 1;
        }
        else return 2;
    }
    else if(s==2){
        if(c=='a') return 1;
        else return 3;

    }
    else if(s==3){
        if(c=='a') return 1;
        else return 3;
    }



}

int main(){
    char inp[100];
    gets(inp);
    int i,j,state,next;


    i=0;
    state=1;
    while(inp[i]!='\0'){

        next=inp[i];
        state=dfa(state,next);
        i++;
    }
    if(state==3){
        cout<<"Yes";
    }
    else{
        cout<<"NO";
    }




}


--------------------------------------

FIRST
------------------------
#include<bits/stdc++.h>
using namespace std;

void FIRST(char c);       

int cnt, n;                 
string prod[100], first;        

int main()
{
    cout << "Enter the number of productions: ";
    cin >> cnt;

    cout << "\nEnter the productions: \n\n";

    for(int i=0; i<cnt; i++)
    {
        cin >> prod[i];
    }

    cout << "\n\nFIRST of the non-terminals: \n\n";

    for(int i=0; i<cnt; i++)
    {
        n = 0;                  
        char c = prod[i][0];
        cout<<"prod";
        cout<<prod[i];
        cout<<" ";
        cout<<prod[i][0];  
        FIRST(c);               

        cout << "FIRST(" << c << ") = {";
        for(int j=0; j<n-1; j++)
        {                              
            cout << first[j] << ", ";
        }
        cout << first[n-1] << "}\n";        
    }
}

void FIRST(char c)
{
    if(!isupper(c))         
    {
        first[n++] = c;             
    }

    for(int i=0; i<cnt; i++)
    {
        if(prod[i][0] == c)         
        {
            if(prod[i][2] == '$')      
                first[n++] = '$';            

            else if(islower(prod[i][2]))        
                first[n++] = prod[i][2];            

            else                        
                FIRST(prod[i][2]);         
        }
    }
}
-------------------------------------
-
Three address code
-------------------
#include<bits/stdc++.h>
using namespace std;

int main()
{
    string str;
    printf("enter the statement:");
    cin >> str;

    int count =1;
    for(int i=0;i<str.length();i++)
    {
        if(str[i]=='*' || str[i]=='/')
        {
            if(count==1)
            {
                cout << "t" << count << "=" << str[i-1] << str[i] << str[i+1] << "\n";
            }
            else
            {
                if (str[i+1]=='0' && str[i-1]=='0')
                {

                    cout << "t" << count << "=" << "t" << count-1 << str[i] << "t" << count-2 << "\n";
                }
                else if(str[i-1]=='0')
                {
                    cout << "t" << count << "=" << "t" << count-1 << str[i] << str[i+1] << "\n";
                }
                else if(str[i+1]=='0')
                {
                    cout << "t" << count << "=" << "t" << count-1 << str[i] << str[i-1] << "\n";
                }

                else
                {
                    cout << "t" << count << "=" << str[i-1] << str[i] << str[i+1] << "\n";
                }
            }
            count++;
            for(int j=i-1;j<=i+1;j++)
            {
                str[j] = '0';
            }
            i=0;
        }
    }


    for(int i=0;i<str.length();i++)
    {
        if(str[i]=='+' || str[i]=='-')
        {
            if(count==1)
            {
                cout << "t" << count << "=" << str[i-1] << str[i] << str[i+1] << "\n";
            }
            else
            {
                if (str[i+1]=='0' && str[i-1]=='0')
                {

                    cout << "t" << count << "=" << "t" << count-1 << str[i] << "t" << count-2 << "\n";
                }
                else if(str[i-1]=='0')
                {
                    cout << "t" << count << "=" << "t" << count-1 << str[i] << str[i+1] << "\n";
                }
                else if(str[i+1]=='0')
                {
                    cout << "t" << count << "=" << "t" << count-1 << str[i] << str[i-1] << "\n";
                }

                else
                {
                    cout << "t" << count << "=" << str[i-1] << str[i] << str[i+1] << "\n";
                }
            }
            count++;
            for(int j=i-1;j<=i+1;j++)
            {
                str[j] = '0';
            }
            i=0;
        }
    }
    cout << str[0] << "=" << "t" << count-1;
}

--------------------------------------
literal
--------------------
#include<bits/stdc++.h>
using namespace std;

void literalAnalyzer(string input);    

int main()
{
    string input,token;             
    token ="";
    cout << "Enter a string: ";
    getline(cin, input);                


    cout << "\n\n\nString Literal:\n\n";

    literalAnalyzer(input);

}

void literalAnalyzer(string input)
{
    for(int i=0;i<input.length();i++)
    {
        if(input[i] == '"')         
        {
            string token = "";
            i++;
            bool isString = false;      

            while(i < input.length())           
            {
                if(input[i] == '"')        
                {
                    isString = true;
                    break;
                }

                token += input[i];              
                i++;
            }

            if(isString == true)                 
            {
                cout << token << " is a string literal.\n";
            }
        }
    }
}



--------------------------
asseembly code
------------------------
#include<bits/stdc++.h>
using namespace std;

string code[100];

int main()
{
    int n;
    cout << "Enter the number of lines of TAC: ";
    cin >> n;

    int reg[100];                          
    cout << "\nEnter the TAC codes: \n\n";     
    for(int i=0; i<n; i++)
    {
        cin >> code[i];
        reg[i] = -1;                           
    }

    cout << "\n\nAssembly Code: \n\n";             
    int cnt = 0, x = -1, y = -1;                      
    string op;                                     

    for(int i=0; i<n; i++)
    {
        for(int j=0; j<i; j++)                        
            if(code[i][2] == code[j][0])            
            {
                x = j;                              
            }
        }

        for(int j=0; j<i; j++)                      
        {
            if(code[i][4] == code[j][0])                
            {
                y = j;                              
            }
        }

        if(x != -1 && reg[x] != -1)                 
        {
            cout << "MOV " << "R" << reg[x] << ", R" << cnt << "\n";    
        }
        else                                                        
        {
            cout << "MOV " << code[i][2] << ", R" << cnt << "\n";       
        }

        if(code[i][3] == '+')               
            op = "ADD";
        else if(code[i][3] == '-')
            op = "SUB";
        else if(code[i][3] == '*')
            op = "MUL";
        else if(code[i][3] == '/')
            op = "DIV";

        if(y != -1 && reg[y] != -1)                 
        {
            cout << op << " R" << reg[y] << ", R" << cnt << "\n";   
        }
        else                                                    
        {
            cout << op << " " << code[i][4] << ", R" << cnt << "\n";    
        }

        reg[i] = cnt;       
        cnt++;                  
        x = -1;                 
        y = -1;
    }

    cout << "MOV R" << cnt-1 << ", " << code[n-1][0] << "\n";   

    return 0;
}

