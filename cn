Additive
#include<bits/stdc++.h>
using namespace std;
string En(string pText,int k){
 string CipherText="";
 for(int i=0;i<pText.size();i++){
 CipherText+= ((pText[i]-'a')+k)%26+'A';
 }
 return CipherText;
}
string De(string pText,int k){
 string decipherText="";
 for(int i=0;i<pText.size();i++){
 decipherText+= ((pText[i]+'A')-k)%26+'a';
 }
 return decipherText;
}
int main(){
 freopen("additiveInput.txt","r",stdin);
 string p_text;
 cin>> p_text;
 int k;
 cin>>k;
 string CipherText= En(p_text,k);
 cout<<"Cipher Text: "<<CipherText<<"\n";
 string decipherText= De(CipherText,k);
 cout<<"Plain Text: "<<decipherText<<"\n";
 return 0;
}
Multiplicative
#include<bits/stdc++.h>
using namespace std;
string encryption_multiplicative(string plainText, int k1);
string decryption_multiplicative(string cipherText, int k1);
int multiplicativeInverse(int k1);
int main()
{
int multiplicativeInverse(int k1);
 freopen("multiplicativeInput.txt", "r", stdin);
 string plainText;
 cin >> plainText;
 int k1;
 cin >> k1;
 if(multiplicativeInverse(k1) == -1)
 {
 cout <<"There is no multiplicative inverse for " << k1<< ". Write valid key in the text file and run 
again.\n";
 return 0;
 }
 string cipherText = encryption_multiplicative(plainText, k1);
 cout << "The cipherText is: " << cipherText << "\n";
 string decipherText = decryption_multiplicative(cipherText, k1);
 cout << "The decipherText is: " << decipherText << "\n";
 return 0;
}
string encryption_multiplicative(string plainText, int k1)
{
 string cipherText = "";
 for(int i=0; i<plainText.size(); i++)
 {
 cipherText += ((plainText[i] - 'a') * k1) % 26 + 'A';
 }
 return cipherText;
}
string decryption_multiplicative(string cipherText, int k1)
{
 int k1_inverse = multiplicativeInverse(k1);
 string decipherText = "";
 for(int i=0; i<cipherText.size(); i++)
 {
 decipherText += ((cipherText[i] + 'A') * k1_inverse) % 26 + 'a';
 }
 return decipherText;
}
int multiplicativeInverse(int k1)
{
 for(int i=1; i<26; i++)
 {
 if((k1 * i) % 26 == 1)
 return i;
 }
 return -1;
}
AAffine
#include<bits/stdc++.h>
using namespace std;
string encryption_affine(string plainText, int k1, int k2);
string decryption_affine(string cipherText, int k1, int k2);
int multiplicativeInverse(int k1);
int main()
{
 freopen("affineInput.txt", "r", stdin);
 string plainText;
 cin >> plainText;
 int k1, k2;
 cin >> k1 >> k2;
 if(multiplicativeInverse(k1) == -1)
 {
 cout <<"There is no multiplicative inverse for " << k1<< ". Write valid key in the text file and run 
again.\n";
 return 0;
 }
 string cipherText = encryption_affine(plainText, k1, k2);
 cout << "The cipherText is: " << cipherText << "\n";
 string decipherText = decryption_affine(cipherText, k1, k2);
 if(decipherText != "")
 cout << "The decipherText is: " << decipherText << "\n";
 return 0;
}
string encryption_affine(string plainText, int k1, int k2)
{
 string cipherText = "";
 for(int i=0; i<plainText.size(); i++)
 {
 cipherText += (((plainText[i] - 'a') * k1) + k2) % 26 + 'A';
 }
 return cipherText;
}
string decryption_affine(string cipherText, int k1, int k2)
{
 int k1_inverse = multiplicativeInverse(k1);
 string decipherText = "";
 for(int i=0; i<cipherText.size(); i++)
 {
 decipherText += (((cipherText[i] + 'A' - k2) * k1_inverse)) % 26 + 'a';
 }
 return decipherText;
}
int multiplicativeInverse(int k1)
{
 for(int i=1; i<26; i++)
 {
 if((k1 * i) % 26 == 1)
 return i;
 }
 return -1;
}
Autoookey
#include<bits/stdc++.h>
using namespace std;
string encryption(string s, int key)
{
 for(int i = 0; i < s.length(); i++){
 int temp = s[i]-'a';
 s[i] = (s[i]-'a' + key)%26+'a';
 key = temp;
 }
 return s;
}
string decryption(string s, int key)
{
 for(int i = 0; i < s.length(); i++){
 s[i] = (s[i] - key - 'a'+26)%26 + 'a';
 key = s[i]-'a';
 }
 return s;
}
int main()
{
freopen("autokeyInput.txt","r",stdin);
//freopen("out.txt","w",stdout);
 string plain_text;
 int key;
 cin >> plain_text >> key;
 string cipher_text = encryption(plain_text,key);
 int n = plain_text.length();
 for(int i = 0; i < n; i++){
 cipher_text[i] = toupper(cipher_text[i]);
 }
 cout << "ciphertext: ";
 cout << cipher_text << "\n";
 for(int i = 0; i < n; i++){
 cipher_text[i] = tolower(cipher_text[i]);
 }
 plain_text = decryption(cipher_text,key);
 cout << "plaintext: ";
 cout << plain_text << "\n";
 return 0;
}
